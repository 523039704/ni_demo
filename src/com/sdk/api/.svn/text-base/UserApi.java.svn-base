/**
 * Copyright (c) 2011-2014, James Zhan 詹波 (jfinal@126.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 */

package com.sdk.api;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;

import javax.imageio.ImageIO;
import javax.net.ssl.HttpsURLConnection;

import net.sf.json.JSONObject;

import com.google.gson.Gson;
import com.jfinal.kit.HttpKit;
import com.sdk.kit.ParaMap;
import com.swetake.util.Qrcode;


/**
 * 用户管理 API
 * https://api.weixin.qq.com/cgi-bin/user/info?access_token=ACCESS_TOKEN&openid=OPENID&lang=zh_CN
 */
public class UserApi {
	
	private static String getUserInfo = "https://api.weixin.qq.com/cgi-bin/user/info";
	private static String getFollowers = "https://api.weixin.qq.com/cgi-bin/user/get";
	public static String GET_CODE = "https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&scope=snsapi_base&state=a123#wechat_redirect";
	private static String CODE_TO_access_token = "https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&secret=SECRET&code=CODE&grant_type=authorization_code";
	public static String CODE_TO_USERINFO = "https://qyapi.weixin.qq.com/cgi-bin/user/getuserinfo?access_token=ACCESS_TOKEN&code=CODE&agentid=AGENTID";
	
	public static ApiResult getUserInfo(String openId) {
		ParaMap pm = ParaMap.create("access_token", AccessTokenApi.getAccessToken().getAccessToken()).put("openid", openId).put("lang", "zh_CN");
		return new ApiResult(HttpKit.get(getUserInfo, pm.getData()));
	}
	
	public static ApiResult getFollowers(String nextOpenid) {
		ParaMap pm = ParaMap.create("access_token", AccessTokenApi.getAccessToken().getAccessToken());
		if (nextOpenid != null)
			pm.put("next_openid", nextOpenid);
		return new ApiResult(HttpKit.get(getFollowers, pm.getData()));
	}
	
	public static ApiResult getFollows() {
		return getFollowers(null);
	}
	
	/**
	 * 企业获取code地址处理
	 * @param appid 企业的CorpID
	 * @param redirect_uri 授权后重定向的回调链接地址，请使用urlencode对链接进行处理
	 * @param response_type 返回类型，此时固定为：code
	 * @param scope 应用授权作用域，此时固定为：snsapi_base
	 * @param state 重定向后会带上state参数，企业可以填写a-zA-Z0-9的参数值
	 * @param #wechat_redirect 微信终端使用此参数判断是否需要带上身份信息
	 * 员工点击后，页面将跳转至 redirect_uri/?code=CODE&state=STATE，企业可根据code参数获得员工的userid
	 * */
	public static String GetCode(String appId,String redirect_url){
		String get_code_url = "";
		get_code_url = GET_CODE.replace("APPID", appId).replace("REDIRECT_URI", URLEncoder(redirect_url));
		return get_code_url;
	}
	
	public static String GetCode_to_access_token(String APPID,String SECRET,String CODE){
		CODE_TO_access_token = CODE_TO_access_token.replace("APPID", APPID).replace("SECRET", SECRET).replace("CODE",CODE);
		JSONObject jsonobject = HttpRequest(CODE_TO_access_token, "GET", null);
		
		return jsonobject.getString("access_token");
	}
	
	/**
	 * 根据code获取成员信息
	 * @param access_token 调用接口凭证
	 * @param code 通过员工授权获取到的code，每次员工授权带上的code将不一样，code只能使用一次，5分钟未被使用自动过期
	 * @param agentid 跳转链接时所在的企业应用ID
	 * 管理员须拥有agent的使用权限；agentid必须和跳转链接时所在的企业应用ID相同
	 * */
	public static String GetUserID(String access_token,String code ,String agentid){
		String UserId = "";
		CODE_TO_USERINFO = CODE_TO_USERINFO.replace("ACCESS_TOKEN", access_token).replace("CODE", code).replace("AGENTID", agentid);
		JSONObject jsonobject = HttpRequest(CODE_TO_USERINFO, "GET", null);
		System.out.println("----------"+jsonobject);
		if(null!=jsonobject){
			UserId = jsonobject.getString("UserId");
			if(!"".equals(UserId)){
				System.out.println("获取信息成功，o(∩_∩)o ————UserID:"+UserId);
			}else{
				int errorrcode = jsonobject.getInt("errcode");  
	            String errmsg = jsonobject.getString("errmsg");
	            System.out.println("错误码："+errorrcode+"————"+"错误信息："+errmsg);
			}
		}else{
			System.out.println("获取授权失败了，●﹏●，自己找原因。。。");
		}
		return UserId;
	}
	
	
	public static String URLEncoder(String str){
		String result = str ;
		try {
		result = java.net.URLEncoder.encode(result,"UTF-8");	
		} catch (Exception e) {
        e.printStackTrace();
		}
		return result;
	}
	
	/** 
     * 发起https请求并获取结果 
     *  
     * @param requestUrl 请求地址 
     * @param requestMethod 请求方式（GET、POST） 
     * @param outputStr 提交的数据 
     * @return JSONObject(通过JSONObject.get(key)的方式获取json对象的属性值) 
     */  
	public static JSONObject HttpRequest(String request , String RequestMethod , String output ){
		@SuppressWarnings("unused")
		JSONObject jsonObject = null;
		StringBuffer buffer = new StringBuffer();
		try {
			//建立连接
			URL url = new URL(request);
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setDoOutput(true);
			connection.setDoInput(true);
			connection.setUseCaches(false);
			connection.setRequestMethod(RequestMethod);
			if(output!=null){
				OutputStream out = connection.getOutputStream();
				out.write(output.getBytes("UTF-8"));
				out.close();
			}
			//流处理
			InputStream input = connection.getInputStream();
			InputStreamReader inputReader = new InputStreamReader(input,"UTF-8");
			BufferedReader reader = new BufferedReader(inputReader);
			String line;
			while((line=reader.readLine())!=null){
				buffer.append(line);
			}
			//关闭连接、释放资源
			reader.close();
			inputReader.close();
			input.close();
			input = null;
			connection.disconnect();
			jsonObject = JSONObject.fromObject(buffer.toString());
		} catch (Exception e) {
		}
		return jsonObject;
	}
	
	/**
	 * 生成二维码(QRCode)图片
	 * @param content
	 * @param imgPath
	 */
	public static void encoderQRCode(String content, String imgPath){
		try{
			Qrcode qrcodeHandler = new Qrcode();
			qrcodeHandler.setQrcodeErrorCorrect('M');
			qrcodeHandler.setQrcodeEncodeMode('B');
			qrcodeHandler.setQrcodeVersion(7);
			System.out.println(content);
			byte[] contentBytes = content.getBytes("UTF-8");
			BufferedImage bufImg = new BufferedImage(140, 140,BufferedImage.TYPE_INT_RGB);
			Graphics2D gs = bufImg.createGraphics();
			gs.setBackground(Color.WHITE);
			gs.clearRect(0, 0, 140, 140);
			// 设定图像颜色 > BLACK
			gs.setColor(Color.BLACK);
			// 设置偏移量 不设置可能导致解析出错
			int pixoff = 2;
			// 输出内容 > 二维码
			if (contentBytes.length > 0 && contentBytes.length < 120){
				boolean[][] codeOut =qrcodeHandler.calQrcode(contentBytes);
				for (int i = 0; i < codeOut.length; i++ ){
					for (int j = 0; j < codeOut.length; j++ ){
						if (codeOut[j][i]){
							gs.fillRect(j * 3 + pixoff, i * 3 + pixoff, 3,3);
						}
					}
				}
			}else {
				System.err.println("QRCode content bytes length = " +contentBytes.length+ " not in [ 0,120 ]. ");
			}
			gs.dispose();
			bufImg.flush();
			File imgFile = new File(imgPath);
			// 生成二维码QRCode图片
			ImageIO.write(bufImg, "png", imgFile);
		}catch (Exception e){
			e.printStackTrace();
		}
	}
	
	/*
	 * 创建二维码
	 * */
	public static ResponseDCode createDCode(String scene_id, String accessToken){
		
		/*得到urlConnection*/
		HttpURLConnection urlConnection = null;
		
		StringBuffer strb = null;
		
		OutputStream out = null;
		
		OutputStreamWriter writer = null;
		
		BufferedWriter bwriter = null;
		
		InputStream in = null;
		
		InputStreamReader reader = null;
		
		BufferedReader breader = null;
		
		try {
			
			/*得到url*/
			URL url = new URL("https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token="+accessToken);
			
			/*打开连接*/
			urlConnection = (HttpURLConnection)url.openConnection();
			urlConnection.setDoOutput(true);
			urlConnection.setRequestMethod("POST");
			
			out = urlConnection.getOutputStream();
			
			/*urlConnection write*/
			writer = new OutputStreamWriter(out,"UTF-8");
			
			bwriter = new BufferedWriter(writer);
			
			bwriter.write(getStr(scene_id));
			
			bwriter.flush();
			
			
			/*urlConnection reader*/
			in = urlConnection.getInputStream();
			
			reader = new InputStreamReader(in);
			
			breader = new BufferedReader(reader);
			
			String str = null;
			
			strb = new StringBuffer();
			
			while(null!=(str = breader.readLine())){
				
				strb.append(str);
				
			}
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			
			out.close();
			
			writer.close();
			
			bwriter.close();
					
			in.close();
			
			reader.close();
			
			breader.close();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		
		if(null != urlConnection){
			
			urlConnection.disconnect();
			
		}
		
		Gson gson = new Gson();
		
		return gson.fromJson(strb.toString(), ResponseDCode.class);
		
	}
	
	
	/*请求报文*/
	private static String getStr(String scene_id){
		
		return "{\"action_name\": \"QR_LIMIT_SCENE\", \"action_info\": {\"scene\": {\"scene_id\": "+scene_id+"}}}";
		
	}
	
	/*通过ticket换取*/
	public static void getDCode(ResponseDCode responseDCode , String str){
		
		HttpsURLConnection urlConnection = null;
		
		try {
			
			/*得到连接*/
			URL url = new URL("https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket="+responseDCode.getTicket());
			
			urlConnection = (HttpsURLConnection)url.openConnection();
			
			urlConnection.connect();
			
			/*urlConnection read*/
			InputStream in = urlConnection.getInputStream();
			
			BufferedInputStream bin = new BufferedInputStream(in);
			
			/*file write*/
			File file = new File(str);
			
			FileOutputStream fout = new FileOutputStream(file);
			
			int x = -1;
			
			byte[] b = new byte[1024];
			
			while(-1 != (x = bin.read(b))){
				
				fout.write(b , 0 , x);
				fout.flush();
			}
			
			fout.flush();
			
			fout.close();
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if(null != urlConnection){
			
			urlConnection.disconnect();
			
		}
		
	}
}
